// Generated by CoffeeScript 1.11.1
(function($) {
  var BrowserNotice, Subnotice, applyStyles, getCurrentTranslation, getSubnoticeContainer, getTranslateStyleObject, markup, regExCommaList, regExMatrixValues, removeStyles, style, styleOpenState, subnotify;
  applyStyles = function(el, styleObject, additional) {
    var key, returnedValue, target, value;
    if (additional) {
      styleObject = $.extend({}, styleObject, additional);
    }
    target = el[0] || el;
    for (key in styleObject) {
      value = styleObject[key];
      switch (typeof value) {
        case 'object':
          this.applyStyles(target, value);
          break;
        case 'function':
          returnedValue = value(this);
          if (typeof returnedValue === 'object') {
            this.applyStyles(target, returnedValue);
          } else {
            target.style[key] = returnedValue;
          }
          break;
        default:
          target.style[key] = value;
      }
    }
    return el;
  };
  removeStyles = function(el, styleObject, stylesToReinstate) {
    var stylesToRemove;
    stylesToRemove = new function() {
      var key;
      for (key in styleObject) {
        this[key] = '';
      }
      return this;
    };
    return this.applyStyles(el, stylesToRemove, stylesToReinstate);
  };
  getSubnoticeContainer = function(direction) {
    var container, existingContainer;
    existingContainer = $(".Subnotices.direction---" + direction, Subnotice.context);
    if (existingContainer.length) {
      return existingContainer;
    } else {
      container = $(markup.container(direction)).appendTo(Subnotice.context);
      applyStyles(container, Subnotice.style[direction].container);
      return container;
    }
  };
  getTranslateStyleObject = function(value) {
    return {
      webkitTransform: "translateY(" + value + ")",
      mozTransform: "translateY(" + value + ")",
      msTransform: "translateY(" + value + ")",
      oTransform: "translateY(" + value + ")",
      transform: "translateY(" + value + ")"
    };
  };
  regExMatrixValues = /matrix3?d?\((.+)\)/;
  regExCommaList = /,\s*/;
  getCurrentTranslation = function(subnotice) {
    var computedStyle, matrix, translateY, values;
    computedStyle = window.getComputedStyle(subnotice.els.subnotice[0]);
    matrix = computedStyle.transform || computedStyle.webkitTransform || computedStyle.mozTransform;
    if ((matrix != null ? matrix.length : void 0) && matrix !== 'none') {
      values = matrix.match(regExMatrixValues)[1];
      translateY = values.split(regExCommaList).slice(-1)[0];
    } else {
      translateY = 0;
    }
    return parseFloat(translateY);
  };
  style = {};
  styleOpenState = {};
  style.bottom = {
    container: {
      position: 'fixed',
      zIndex: '10000',
      bottom: '0',
      left: '0',
      width: '100%'
    },
    subnotice: {
      position: 'absolute',
      bottom: 0,
      width: '100%',
      padding: '13px 45px 10px',
      boxSizing: 'border-box',
      transform: getTranslateStyleObject('100%'),
      backgroundColor: function(notice) {
        return Subnotice.colors[Subnotice.colorMapping[notice.type]] || 'grey';
      },
      color: function(notice) {
        if (Subnotice.requiresDarkText[notice.type]) {
          return Subnotice.colors.dark;
        } else {
          return Subnotice.colors.light;
        }
      },
      transition: function(notice) {
        return "transform " + (notice.animationSpeed / 1000) + "s";
      }
    },
    text: {
      fontSize: '13px',
      fontWeight: 500,
      lineHeight: 1
    },
    icon: {
      position: 'absolute',
      top: '50%',
      left: '14px',
      width: '20px',
      height: '20px',
      transform: getTranslateStyleObject('-50%'),
      borderRadius: '50%',
      fontSize: '11px',
      lineHeight: '20px',
      textAlign: 'center',
      backgroundColor: function(notice) {
        if (Subnotice.requiresDarkText[notice.type]) {
          return Subnotice.colors.dark;
        } else {
          return Subnotice.colors.light;
        }
      },
      color: function(notice) {
        return Subnotice.colors[Subnotice.colorMapping[notice.type]] || 'grey';
      }
    },
    close: {
      position: 'absolute',
      top: '50%',
      right: '10px',
      transform: getTranslateStyleObject('-50%'),
      fontSize: '15px',
      lineHeight: 1,
      cursor: 'pointer'
    }
  };
  style.top = {
    container: $.extend({}, style.bottom.container, {
      top: 0,
      bottom: 'auto'
    }),
    subnotice: $.extend({}, style.bottom.subnotice, {
      transform: getTranslateStyleObject('0%')
    }),
    text: $.extend({}, style.bottom.text),
    icon: $.extend({}, style.bottom.icon),
    close: $.extend({}, style.bottom.close)
  };
  styleOpenState.bottom = {
    subnotice: {
      marginBottom: function(notice) {
        return notice.placementOffset + "px";
      },
      transform: getTranslateStyleObject('0%')
    }
  };
  styleOpenState.top = {
    subnotice: {
      marginBottom: function(notice) {
        return "-" + notice.placementOffset + "px";
      },
      transform: getTranslateStyleObject('100%')
    }
  };
  markup = {
    container: function(direction) {
      return "<div class='Subnotices direction---" + direction + "'></div>";
    },
    subnotice: function(type, extraClassnames) {
      if (extraClassnames == null) {
        extraClassnames = '';
      }
      return "<div class='Subnotice __" + type + " " + extraClassnames + "'></div>";
    },
    icon: function(icon) {
      if (icon == null) {
        icon = '';
      }
      return "<div class='Subnotice-icon'><div>" + icon + "</div></div>";
    },
    text: function(text) {
      return "<div class='Subnotice-text'><div>" + text + "</div></div>";
    },
    close: function(icon) {
      if (icon == null) {
        icon = '';
      }
      return "<div class='Subnotice-close'><div>" + icon + "</div></div>";
    }
  };
  Subnotice = function(arg) {
    var base, ref;
    this.type = arg.type, this.text = arg.text, this.time = arg.time, this.icon = (ref = arg.icon) != null ? ref : Subnotice.icons[this.type], this.extraClassnames = arg.extraClassnames;
    this.animationSpeed = Subnotice.animationSpeed;
    this.direction = Subnotice.direction;
    this.els = {};
    this.els.container = getSubnoticeContainer(this.direction);
    this.els.subnotice = $(markup.subnotice(this.type, this.extraClassnames)).data('Subnotice', this);
    this.els.icon = $(markup.icon(this.icon)).appendTo(this.els.subnotice);
    this.els.text = $(markup.text(this.text)).appendTo(this.els.subnotice);
    this.els.close = $(markup.close(Subnotice.icons.close)).appendTo(this.els.subnotice);
    this.isActive = true;
    this.noticesList = (base = this.els.container[0]).noticesList != null ? base.noticesList : base.noticesList = [];
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.appendToDOM();
    this.attachEvents();
    Subnotice.instances.push(this);
    return this;
  };
  Subnotice.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, Subnotice.style[this.direction].container);
    this.applyStyles(this.els.subnotice, Subnotice.style[this.direction].subnotice);
    this.applyStyles(this.els.icon, Subnotice.style[this.direction].icon);
    this.applyStyles(this.els.text, Subnotice.style[this.direction].text);
    this.applyStyles(this.els.close, Subnotice.style[this.direction].close);
    return this.els.subnotice.appendTo(this.els.container);
  };
  Subnotice.prototype.reveal = function() {
    var otherNoticesHeights;
    otherNoticesHeights = this.noticesList.slice().map(function(notice) {
      if (notice.beingDestroyed) {
        return 0;
      } else {
        return notice.els.subnotice[0].offsetHeight;
      }
    });
    this.placementOffset = !otherNoticesHeights.length ? 0 : otherNoticesHeights.reduce(function(a, b) {
      if (a == null) {
        a = 0;
      }
      if (b == null) {
        b = 0;
      }
      return a + b;
    });
    this.noticesList.push(this);
    this.applyStyles(this.els.subnotice, Subnotice.styleOpenState[this.direction].subnotice, {
      zIndex: 100 - this.noticesList.length
    });
    if (this.time !== false) {
      return setTimeout(((function(_this) {
        return function() {
          return _this.destroy();
        };
      })(this)), this.time);
    }
  };
  Subnotice.prototype.attachEvents = function() {
    return this.els.close.on(Subnotice.clickEvent, (function(_this) {
      return function() {
        return _this.destroy();
      };
    })(this));
  };
  Subnotice.prototype.destroy = function(animationSpeed) {
    var noticeHeight, noticesInFront;
    if (animationSpeed == null) {
      animationSpeed = this.animationSpeed;
    }
    if (this.isActive) {
      this.beingDestroyed = true;
      noticesInFront = this.noticesList.slice(this.noticesList.indexOf(this));
      noticeHeight = this.els.subnotice[0].offsetHeight;
      if (this.direction === 'top') {
        noticeHeight *= -1;
      }
      noticesInFront.concat(this).forEach((function(_this) {
        return function(subnotice) {
          var newTranslate;
          newTranslate = getCurrentTranslation(subnotice) + noticeHeight;
          return subnotice.applyStyles(subnotice.els.subnotice, getTranslateStyleObject(newTranslate + "px"));
        };
      })(this));
      if (Subnotice.instances.includes(this)) {
        Subnotice.instances.splice(Subnotice.instances.indexOf(this), 1);
      }
      return setTimeout((function(_this) {
        return function() {
          if (!_this.isActive) {
            return;
          }
          _this.isActive = _this.beingDestroyed = false;
          _this.noticesList.splice(_this.noticesList.indexOf(_this), 1);
          return _this.els.subnotice.remove();
        };
      })(this), animationSpeed + 20);
    }
  };
  BrowserNotice = function(arg) {
    this.title = arg.title, this.text = arg.text;
    if (typeof Notification === "undefined" || Notification === null) {
      return this;
    }
    if (Notification.permission === 'granted') {
      this.reveal();
    } else {
      Notification.requestPermission().then((function(_this) {
        return function(state) {
          if (state === 'granted') {
            return _this.reveal();
          }
        };
      })(this));
    }
    return this;
  };
  BrowserNotice.prototype.reveal = function() {
    return this.notice = new Notification(this.title, {
      'body': this.text
    });
  };
  subnotify = function(arg) {
    var browserNotice, delay, extraClassnames, ref, ref1, ref2, ref3, ref4, subnotice, text, time, title, type;
    type = (ref = arg.type) != null ? ref : 'info', title = (ref1 = arg.title) != null ? ref1 : '', text = (ref2 = arg.text) != null ? ref2 : '', time = (ref3 = arg.time) != null ? ref3 : Subnotice.time, delay = (ref4 = arg.delay) != null ? ref4 : Subnotice.delay, extraClassnames = arg.extraClassnames, browserNotice = arg.browserNotice;
    subnotice = new Subnotice({
      type: type,
      text: text,
      time: time,
      extraClassnames: extraClassnames
    });
    if (browserNotice) {
      new BrowserNotice({
        title: title,
        text: text
      });
    }
    setTimeout(function() {
      return subnotice.reveal();
    }, delay);
    return subnotice;
  };
  Subnotice.version = '3.0.0';
  Subnotice.markup = markup;
  Subnotice.style = style;
  Subnotice.styleOpenState = styleOpenState;
  Subnotice.instances = [];
  Subnotice.direction = 'bottom';
  Subnotice.clickEvent = 'click';
  Subnotice.animationSpeed = 300;
  Subnotice.time = 10000;
  Subnotice.delay = 250;
  Subnotice.context = document.body;
  Subnotice.requiresDarkText = {
    'info': true
  };
  Subnotice.colorMapping = {
    'info': 'grey',
    'success': 'green',
    'error': 'red',
    'warning': 'yellow'
  };
  Subnotice.colors = {
    'light': '#ffffff',
    'dark': '#313131',
    'green': '#72c322',
    'red': '#95190c',
    'yellow': '#e3b505',
    'grey': '#a2a3a5'
  };
  Subnotice.icons = {
    'info': '',
    'success': '',
    'error': '',
    'warning': '',
    'close': ''
  };
  window.subnotify = subnotify;
  return window.Subnotice = Subnotice;
})(jQuery);
